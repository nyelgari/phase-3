// <auto-generated />
using System;
using Equinox.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Equinox.Migrations
{
    [DbContext(typeof(EquinoxContext))]
    partial class EquinoxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Equinox.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquinoxClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingId");

                    b.HasIndex("EquinoxClassId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            EquinoxClassId = 1
                        },
                        new
                        {
                            BookingId = 2,
                            EquinoxClassId = 2
                        });
                });

            modelBuilder.Entity("Equinox.Models.ClassCategory", b =>
                {
                    b.Property<int>("ClassCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ClassCategoryId");

                    b.ToTable("ClassCategories");

                    b.HasData(
                        new
                        {
                            ClassCategoryId = 1,
                            Name = "Yoga"
                        },
                        new
                        {
                            ClassCategoryId = 2,
                            Name = "HIIT"
                        },
                        new
                        {
                            ClassCategoryId = 3,
                            Name = "Cardio"
                        },
                        new
                        {
                            ClassCategoryId = 4,
                            Name = "Strength"
                        });
                });

            modelBuilder.Entity("Equinox.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            Name = "Chicago Loop",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            ClubId = 2,
                            Name = "West Chicago",
                            PhoneNumber = "9876543210"
                        });
                });

            modelBuilder.Entity("Equinox.Models.EquinoxClass", b =>
                {
                    b.Property<int>("EquinoxClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassDay")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassPicture")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("EquinoxClassId");

                    b.HasIndex("ClassCategoryId");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("EquinoxClasses");

                    b.HasData(
                        new
                        {
                            EquinoxClassId = 1,
                            ClassCategoryId = 1,
                            ClassDay = "Monday",
                            ClassPicture = "yoga2.jpg",
                            ClubId = 1,
                            Name = "Morning Yoga",
                            Time = "8 AM – 9 AM",
                            UserId = "coach1"
                        },
                        new
                        {
                            EquinoxClassId = 2,
                            ClassCategoryId = 2,
                            ClassDay = "Wednesday",
                            ClassPicture = "hiit1.jpg",
                            ClubId = 2,
                            Name = "Power HIIT",
                            Time = "6 PM – 7 PM",
                            UserId = "coach1"
                        },
                        new
                        {
                            EquinoxClassId = 3,
                            ClassCategoryId = 3,
                            ClassDay = "Friday",
                            ClassPicture = "barre-fusion.jpg",
                            ClubId = 1,
                            Name = "Cardio Blast",
                            Time = "7 AM – 8 AM",
                            UserId = "coach2"
                        },
                        new
                        {
                            EquinoxClassId = 4,
                            ClassCategoryId = 4,
                            ClassDay = "Saturday",
                            ClassPicture = "strength-training.jpg",
                            ClubId = 2,
                            Name = "Strength Training",
                            Time = "10 AM – 11 AM",
                            UserId = "coach3"
                        },
                        new
                        {
                            EquinoxClassId = 5,
                            ClassCategoryId = 1,
                            ClassDay = "Sunday",
                            ClassPicture = "hatha-yoga.jpg",
                            ClubId = 1,
                            Name = "Yoga 202",
                            Time = "5 PM – 6 PM",
                            UserId = "coach4"
                        },
                        new
                        {
                            EquinoxClassId = 6,
                            ClassCategoryId = 1,
                            ClassDay = "Sunday",
                            ClassPicture = "boxing-101.jpg",
                            ClubId = 1,
                            Name = "Power Yoga",
                            Time = "3 PM – 4 PM",
                            UserId = "coach5"
                        });
                });

            modelBuilder.Entity("Equinox.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCoach")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "coach1",
                            DOB = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane@example.com",
                            IsCoach = true,
                            Name = "Jane Coach",
                            PhoneNumber = "5551234567"
                        },
                        new
                        {
                            UserId = "coach2",
                            DOB = new DateTime(1988, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sarah@example.com",
                            IsCoach = true,
                            Name = "Sarah",
                            PhoneNumber = "5552345678"
                        },
                        new
                        {
                            UserId = "coach3",
                            DOB = new DateTime(1985, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "george@example.com",
                            IsCoach = true,
                            Name = "George",
                            PhoneNumber = "5553456789"
                        },
                        new
                        {
                            UserId = "coach4",
                            DOB = new DateTime(1982, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "henry@example.com",
                            IsCoach = true,
                            Name = "Henry",
                            PhoneNumber = "5554567890"
                        },
                        new
                        {
                            UserId = "coach5",
                            DOB = new DateTime(1991, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lena@example.com",
                            IsCoach = true,
                            Name = "Lena",
                            PhoneNumber = "5555678901"
                        });
                });

            modelBuilder.Entity("Equinox.Models.Booking", b =>
                {
                    b.HasOne("Equinox.Models.EquinoxClass", "EquinoxClass")
                        .WithMany()
                        .HasForeignKey("EquinoxClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquinoxClass");
                });

            modelBuilder.Entity("Equinox.Models.EquinoxClass", b =>
                {
                    b.HasOne("Equinox.Models.ClassCategory", "ClassCategory")
                        .WithMany()
                        .HasForeignKey("ClassCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equinox.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equinox.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ClassCategory");

                    b.Navigation("Club");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
